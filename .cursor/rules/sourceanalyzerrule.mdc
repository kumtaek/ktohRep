---
description:
globs:
alwaysApply: true
---

# Create MetaDB 프로젝트 개발 규칙 필수 준수!!!

## ⚠️ 필수 규칙 (절대 위반 불가)

### 1. 메타디비 스키마 확인 필수

- 스키마 검증: 메타디비 스키마를 직접 조회하여 정확한 컬럼명, 테이블 구조 파악
- 스크립트 작성 전: PRAGMA table_info() 또는 DESCRIBE 명령으로 실제 스키마 확인
- ⚠️ 예상 금지: 스키마를 예상으로 추측하지 말고 반드시 실제 구조 확인 후 작업

### 2. 에러 처리 규칙

- 예외 발생 시: 에러 로그 출력 후 즉시 exit. 그래야 에러난지 인식할 수 있잖아.
  
- 잘못된 사례:
  
  ```python
  try:
      # 파싱 로직
      return await parser.parse(content, file_path)  # 여기서 에러 발생
  except Exception as e:
      logger.error(f"파일 분석 중 오류 발생 {file_path}: {e}")  # 에러 로그만 찍고
      return None  # None 반환하고 다음 파일로 넘어감 # 계속 진행 --> 이러면 안된다고!!! 제발 Exit!!!
  ```
  
- ⚠️ 규칙: 소스오류 스킵처럼 의미가 있는 경우를 제외하고는 모든 오류 발생시 에러로그 남기고 중단되어야 함
  

### 3. 하드코딩 금지 규칙

- 동적 분석: 샘플소스에 하드코딩 금지, 분석대상 소스가 달라져도 동작하도록 개발
- 상대경로: 절대경로 사용 금지, 운영환경 배포 시 경로 변경 고려
- ⚠️ 규칙: 코드에서 하드코딩 사용 절대 금지

### 4. 작업 수행 규칙

- 하란것만 하기: 요청한 것만 수행, 추가 작업 금지
- 단건 커밋: 한 번에 하나의 문제만 해결
- ⚠️ 규칙: 요청하지 않은 작업은 절대 수행하지 않음

### 5. 파일 생성 규칙

- 시각화 리포트, 분석 리포트: ./project/<프로젝트명>/report/ 하위에 생성일시 포함하여 저장
- 진행상황 보고: 적절한 시점마다 ./create_metadb/progress_doc/진척현황_yyyymmdd_hms_<핵심수행내역>.md 파일 작성. 이전 진행상황은 보고내용에 넣지 않음. 금번 작업한 내역만 작성.
- '진척보고해'라고 지시하면 진행상황 보고할 것.
- ⚠️ 규칙: 파일 생성 위치와 명명 규칙 반드시 준수

### 6. 개발 환경 규칙

- 오프라인 환경: 오프라인 폐쇄망에서 동작 가능하도록 구현
- 라이선스: 기업내 무료 사용 가능한 라이선스만 사용
- AutoCommit: AutoCommitSession 공통 적용하여 건건 Commit되도록 함
- ⚠️ 규칙: 운영환경 요구사항 반드시 준수

### 7. Python 실행 환경 규칙

- 모든 실행화일 및 py화일, import시 상대경로에서 ROOT(./)를 기준으로의 상대경로로 개발 할 것.
  
- 현재 ./는 E:\SourceAnalyzer.git\create_metadb 폴더를 기준으로 하고 있으며 모든 스크립트는 E:\SourceAnalyzer.git\create_metadb를 현재 경로로 해서 실행한다.
  
- CREATE_METADB_PATH 환경변수 설정 필수: 모든 Python 스크립트 실행 시 CREATE_METADB_PATH를 create_metadb 루트로 설정
  
- 실행 방법:
  
  ```bash
  set CREATE_METADB_PATH=E:\SourceAnalyzer.git\create_metadb
  cd E:\SourceAnalyzer.git\create_metadb
  python main.py --project-name sampleSrc
  ```
  
- 이유: 상대경로 import 문제 해결을 위해 create_metadb 루트를 Python 모듈 검색 경로에 포함
  
- ⚠️ 규칙: CREATE_METADB_PATH 설정 없이 실행 시 ModuleNotFoundError 발생 가능
  

### 8. Create MetaDB 특화 규칙

- **독립적 운영**: phase1 폴더와 완전히 배타적으로 동작
- **환경변수 활용**: CREATE_METADB_PATH 환경변수로 루트 경로 관리
- **공용 폴더**: ./project 폴더는 기존과 동일하게 공용 사용
- **메타DB 파일**: metadata_optimized.db로 저장하여 기존 metadata.db와 구분
- **상대경로 기반**: create_metadb 루트를 기준으로 한 상대경로만 사용
- ⚠️ 규칙: phase1 시스템과의 의존성 절대 금지

### 9. 성능 최적화 규칙

- **메타DB 크기**: 200KB 이하로 제한 (기존 1.2MB 대비 83% 감소)
- **청크 수**: 250개 이하로 제한 (기존 2,048개 대비 88% 감소)
- **엣지 수**: 150개 이하로 제한 (기존 231개 대비 35% 감소)
- **생성 시간**: 10초 이하로 제한 (기존 30초 대비 67% 감소)
- **LLM 요약**: 250개 이하로 제한 (신규 기능)
- ⚠️ 규칙: 성능 지표 초과 시 최적화 작업 필수

### 10. 신규입사자 지원 특화 규칙

- **비즈니스 분류**: 모든 클래스/메서드에 비즈니스 도메인, 아키텍처 계층, 복잡도 분류 필수
- **학습 우선순위**: 1-5점 우선순위 점수 부여 필수
- **관계 정보**: calls, dependency, import, foreign_key, join 등 핵심 관계만 추출
- **실시간 활용**: 상세 코드 내용은 ./project 폴더에서 실시간 분석
- **SQL 조인 분석**: 규칙 기반 + LLM 보조로 테이블 간 관계 추출
- **LLM 요약**: 비즈니스 목적, 기술적 내용, 학습 가이드 생성
- ⚠️ 규칙: 신규입사자 질의응답에 필요한 정보만 메타DB에 저장

## 🔴 규칙 위반 시 즉시 중단

- 규칙 위반 발견 시 작업 중단
- 규칙 재확인 후 작업 재개
- 절대 규칙 위반 상태로 작업 계속 금지

## ✅ 규칙 준수 확인 체크리스트

작업 시작 전 필수 확인:

□ 메타디비 스키마 확인 완료 (필요시)  
□ 에러 처리 방식 확인 완료  
□ 하드코딩 사용 여부 확인 완료  
□ 요청사항만 수행하는지 확인 완료  
□ 파일 생성 규칙 확인 완료  
□ create_metadb 독립성 확인 완료  
□ 환경변수 설정 확인 완료  
□ 성능 지표 준수 확인 완료  
□ 신규입사자 지원 목적 부합성 확인 완료

## 🎯 Create MetaDB 특화 체크리스트

□ CREATE_METADB_PATH 환경변수 설정 완료  
□ CREATE_METADB_PATH가 create_metadb 루트로 설정 완료  
□ phase1 시스템과의 의존성 제거 완료  
□ 상대경로 기반 import 경로 수정 완료  
□ metadata_optimized.db 파일명 사용 완료  
□ ./project 폴더 공용 사용 설정 완료  
□ 성능 최적화 목표 달성 확인 완료  
□ 신규입사자 지원 기능 구현 완료  
□ SQL 조인 분석 기능 구현 완료  
□ LLM 요약 생성 기능 구현 완료

⚠️ 이 규칙들은 참고사항이 아닌 필수 준수사항입니다!

---

**작성일**: 2025-09-06  
**적용 대상**: Create MetaDB 프로젝트  
**버전**: 1.0.0