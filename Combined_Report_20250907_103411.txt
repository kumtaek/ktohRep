================================================================================
SourceAnalyzer 통합 분석 리포트
================================================================================

========================================
1. ERD (Entity Relationship Diagram)
========================================
ERD - Entity Relationship Diagram
==================================================

[테이블 목록] - 총 11개
  실제 테이블 (5개):
    - brands
    - categories
    - products
    - user_types
    - users
  참조 테이블 (6개):
    - SYSDATE [더미]
    - orders [더미]
    - roles [더미]
    - u [더미]
    - user_preferences [더미]
    - user_roles [더미]

[관계 다이어그램] - 총 31개
  JOIN 관계 (31개):
    orders --JOIN--> users (신뢰도: 0.9)
    products --JOIN--> categories (신뢰도: 0.9)
    products --JOIN--> brands (신뢰도: 0.9)
    products --JOIN--> categories (신뢰도: 0.9)
    products --JOIN--> brands (신뢰도: 0.9)
    products --JOIN--> categories (신뢰도: 0.9)
    products --JOIN--> brands (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> products (신뢰도: 0.9)
    users --JOIN--> categories (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> user_roles (신뢰도: 0.9)
    users --JOIN--> roles (신뢰도: 0.9)
    users --JOIN--> products (신뢰도: 0.9)
    users --JOIN--> user_roles (신뢰도: 0.9)
    users --JOIN--> roles (신뢰도: 0.9)
    users --JOIN--> user_roles (신뢰도: 0.9)
    users --JOIN--> roles (신뢰도: 0.9)
    users --JOIN--> user_preferences (신뢰도: 0.9)
    users --JOIN--> user_roles (신뢰도: 0.9)
    users --JOIN--> roles (신뢰도: 0.9)
    users --JOIN--> user_preferences (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> u (신뢰도: 0.9)
    users --JOIN--> SYSDATE (신뢰도: 0.9)
    users --JOIN--> u (신뢰도: 0.9)
    users --JOIN--> SYSDATE (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)
    users --JOIN--> user_types (신뢰도: 0.9)

[요약]
  - 실제 테이블: 5개 (CSV 로드)
  - 참조 테이블: 6개 (MyBatis 분석)
  - JOIN 관계: 31개
  - 외래키 관계: 0개

========================================
2. 시스템 아키텍처 분석 (기본)
========================================
시스템 아키텍처 분석 리포트
==================================================

[통계] 구성 요소 통계
  - 총 컴포넌트: 59개
    - class: 48개
    - table: 5개
    - table_dummy: 6개

  - 총 관계: 284개
    - calls: 116개
    - dependency: 47개
    - implements: 2개
    - imports: 88개
    - join: 31개

[관계] 관계 상세 정보

Calls 관계 (116개)
  - ErrorController -> Integer (신뢰도: 0.8)
  - LogicErrorService -> IllegalArgumentException (신뢰도: 0.8)
  - LogicErrorService -> RuntimeException (신뢰도: 0.8)
  - LogicErrorService -> IllegalArgumentException (신뢰도: 0.8)
  - LogicErrorService -> IllegalArgumentException (신뢰도: 0.8)
  - LogicErrorService -> IllegalArgumentException (신뢰도: 0.8)
  - LogicErrorService -> RuntimeException (신뢰도: 0.8)
  - MixedErrorController -> User (신뢰도: 0.8)
  - MixedErrorController -> Date (신뢰도: 0.8)
  - MixedErrorService -> IllegalArgumentException (신뢰도: 0.8)
  ... 외 106개

Dependency 관계 (47개)
  - ErrorController -> class (신뢰도: 0.8)
  - ErrorController -> UserService (신뢰도: 0.8)
  - LogicErrorService -> class (신뢰도: 0.8)
  - LogicErrorService -> UserMapper (신뢰도: 0.8)
  - LogicErrorService -> User (신뢰도: 0.8)
  - MixedErrorController -> class (신뢰도: 0.8)
  - MixedErrorController -> UserService (신뢰도: 0.8)
  - MixedErrorController -> User (신뢰도: 0.8)
  - MixedErrorController -> User (신뢰도: 0.8)
  - MixedErrorService -> class (신뢰도: 0.8)
  ... 외 37개

Implements 관계 (2개)
  - ProductServiceImpl -> ProductService (신뢰도: 0.8)
  - UserServiceImpl -> UserService (신뢰도: 0.8)

Imports 관계 (88개)
  - BrokenMapper -> Mapper (신뢰도: 0.8)
  - BrokenMapper -> Select (신뢰도: 0.8)
  - BrokenMapper -> Insert (신뢰도: 0.8)
  - BrokenMapper -> Update (신뢰도: 0.8)
  - BrokenMapper -> Delete (신뢰도: 0.8)
  - BrokenMapper -> Product (신뢰도: 0.8)
  - BrokenMapper -> List (신뢰도: 0.8)
  - ErrorController -> User (신뢰도: 0.8)
  - ErrorController -> UserService (신뢰도: 0.8)
  - ErrorController -> Autowired (신뢰도: 0.8)
  ... 외 78개

Join 관계 (31개)
  - orders -> users (신뢰도: 0.9)
  - products -> categories (신뢰도: 0.9)
  - products -> brands (신뢰도: 0.9)
  - products -> categories (신뢰도: 0.9)
  - products -> brands (신뢰도: 0.9)
  - products -> categories (신뢰도: 0.9)
  - products -> brands (신뢰도: 0.9)
  - users -> user_types (신뢰도: 0.9)
  - users -> user_types (신뢰도: 0.9)
  - users -> products (신뢰도: 0.9)
  ... 외 21개

[패턴] 아키텍처 패턴 분석
  * 계층형 아키텍처 (Layered Architecture)
  * 의존성 주입 패턴

[핵심] 핵심 컴포넌트 (허브)
  - IllegalArgumentException : 38개 참조
  - Date : 21개 참조
  - User : 20개 참조
  - RuntimeException : 16개 참조
  - StringUtils : 13개 참조

[의존성] 의존성 중심 컴포넌트
  - ProductServiceImpl : 47개 의존
  - UserServiceImpl : 44개 의존
  - UserController : 26개 의존
  - users : 24개 의존
  - MixedErrorService : 20개 의존

========================================
3. 시스템 아키텍처 분석 (시각적)
========================================
  시스템 아키텍처 구조

  ┌─────────────────────────────────────────────────────────────────┐
  │                                  Controller Layer                               │
  ├─────────────────────────────────────────────────────────────────┤
  │  Controller                    ErrorController                │
  │  MixedErrorController          ProductController              │
  │  SyntaxErrorController         UserController                 │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                    Service Layer                                │
  ├─────────────────────────────────────────────────────────────────┤
  │  LogicErrorService             MixedErrorService              │
  │  ProductService                ProductServiceImpl             │
  │  Service                       UserService                    │
  │  UserServiceImpl                                                │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                     Data Layer                                  │
  ├─────────────────────────────────────────────────────────────────┤
  │  BrokenMapper                  Mapper                         │
  │  ProductMapper                 UserMapper                     │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                     Model Layer                                 │
  ├─────────────────────────────────────────────────────────────────┤
  │  Model                                                          │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                  Other Components                               │
  ├─────────────────────────────────────────────────────────────────┤
  │  ArrayList                     Arrays                         │
  │  Autowired                     Collectors                     │
  │  Date                          Delete                         │
  │  Double                        IllegalArgumentException       │
  │  Insert                        Integer                        │
  │  List                          Long                           │
  │  Map                           Math                           │
  │  NonExistentClass              Objects                        │
  │  Param                         Product                        │
  │  RequestMapping                RequestMethod                  │
  │  RequestParam                  ResponseBody                   │
  │  RuntimeException              Select                         │
  │  String                        Transactional                  │
  │  Update                        User                           │
  │  brands                        categories                     │
  │  class                         products                       │
  │  user_types                    users                          │
  └─────────────────────────────────────────────────────────────────┘


  관계 상세 정보

  [D] Dependency 관계 (47개)

  Controller → Service:
  ├─ ErrorController      → class
  ├─ ErrorController      → UserService
  ├─ MixedErrorController → class
  ├─ MixedErrorController → UserService
  ├─ MixedErrorController → User
  └─ ... 외 9개

  Service → Mapper:
  ├─ LogicErrorService    → class
  ├─ LogicErrorService    → UserMapper
  ├─ LogicErrorService    → User
  ├─ MixedErrorService    → class
  ├─ MixedErrorService    → UserMapper
  └─ ... 외 10개

  [I] Implements 관계 (2개)

  Implementation → Interface:
  ├─ ProductServiceImpl   → ProductService
  ├─ UserServiceImpl      → UserService

  [C] Calls 관계 (116개)

  Implementation → Interface:
  ├─ ErrorController      → Integer
  ├─ LogicErrorService    → IllegalArgumentException
  ├─ LogicErrorService    → RuntimeException
  ├─ LogicErrorService    → IllegalArgumentException
  ├─ LogicErrorService    → IllegalArgumentException
  ├─ LogicErrorService    → IllegalArgumentException
  ├─ LogicErrorService    → RuntimeException
  ├─ MixedErrorController → User
  ├─ MixedErrorController → Date
  ├─ MixedErrorService    → IllegalArgumentException
  └─ ... 외 106개


  구성 요소 통계

  ┌─────────────────┬─────────┬─────────────────────────────────┐
  │ 컴포넌트 타입      │ 수량     │ 구성 요소                        │
  ├─────────────────┼─────────┼─────────────────────────────────┤
  │ Class           │   48개   │ Controllers + Services + Models │
  │ Table           │    5개   │ Database Tables                 │
  ├─────────────────┼─────────┼─────────────────────────────────┤
  │ 총 컴포넌트        │   59개   │ 전체 시스템 구성 요소              │
  └─────────────────┴─────────┴─────────────────────────────────┘

  아키텍처 패턴 분석

  패턴: 계층형 아키텍처 (Layered Architecture)

  ┌─────────────────┐
  │   Controller    │ ─── 웹 요청 처리, 사용자 인터페이스
  └─────────────────┘
           │ dependency
           ▼
  ┌─────────────────┐
  │    Service      │ ─── 비즈니스 로직, 트랜잭션 관리
  └─────────────────┘
           │ dependency
           ▼
  ┌─────────────────┐
  │     Mapper      │ ─── 데이터 접근, SQL 처리
  └─────────────────┘
           │
           ▼
  ┌─────────────────┐
  │     Model       │ ─── 도메인 엔티티
  └─────────────────┘

  특징:
  [OK] 계층 간 단방향 의존성
  [OK] Spring MVC 패턴 준수

  데이터베이스 테이블 구조

  ┌─────────────────────────────────────────────────────────────────┐
  │                                    BRANDS TABLE                                     │
  ├─────────────────────────────────────────────────────────────────┤
  │ [ID] id                 │ BIGINT       │ Primary Key      │
  │ [F]  name               │ VARCHAR      │ Name Field       │
  │ [F]  created_date       │ TIMESTAMP    │ Creation Date    │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                  CATEGORIES TABLE                                   │
  ├─────────────────────────────────────────────────────────────────┤
  │ [ID] id                 │ BIGINT       │ Primary Key      │
  │ [F]  name               │ VARCHAR      │ Name Field       │
  │ [F]  created_date       │ TIMESTAMP    │ Creation Date    │
  └─────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                                   PRODUCTS TABLE                                    │
  ├─────────────────────────────────────────────────────────────────┤
  │ [ID] id                 │ BIGINT       │ Primary Key      │
  │ [F]  product_name       │ VARCHAR      │ Product Name     │
  │ [F]  price              │ DECIMAL      │ Product Price    │
  │ [ID] category_id        │ VARCHAR(FK)  │ → CATEGORIES     │
  │ [ID] brand_id           │ VARCHAR(FK)  │ → BRANDS         │
  │ [F]  status             │ VARCHAR      │ ACTIVE/INACTIVE  │
  │ [F]  created_date       │ TIMESTAMP    │ Creation Date    │
  └─────────────────────────────────────────────────────────────────┘

  테이블 관계도

  CATEGORIES <------+
      |             |
      | 1:N         | 1:N
      V             V
   PRODUCTS <----- BRANDS
                    |
                    | N:M
                    V
                  USERS

  데이터베이스 설계 특징

  [OK] 정규화 수준: 3NF (Third Normal Form)
  |-- 코드 테이블 분리
  |-- 중복 데이터 최소화
  +-- 참조 무결성 유지

  [OK] 설계 패턴:
  |-- 타임스탬프 패턴 (created_date, updated_date)
  |-- 상태 관리 (status 컬럼)
  +-- 코드 테이블 패턴
