package com.example.integrated;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.List;
import java.util.Map;

@Service
public class VulnerabilityTestService {

    @Autowired
    private IntegratedMapper integratedMapper;
    
    /**
     * SQL Injection vulnerability test - using string concatenation
     */
    public List<Map<String, Object>> getUsersByName_VULNERABLE(String userName) {
        // This is vulnerable to SQL injection
        String sql = "SELECT * FROM USERS WHERE NAME = '" + userName + "'";
        return integratedMapper.executeVulnerableQuery(sql);
    }
    
    /**
     * Safe version using parameterized query
     */
    public List<Map<String, Object>> getUsersByName_SAFE(String userName) {
        // This is safe - uses parameterized query
        return integratedMapper.findUsersByName(userName);
    }
    
    /**
     * Another SQL injection vulnerability - StringBuilder
     */
    public List<Map<String, Object>> searchUsers_VULNERABLE(String searchTerm, String category) {
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT * FROM USERS WHERE ");
        sql.append("NAME LIKE '%").append(searchTerm).append("%'");
        sql.append(" AND CATEGORY = '").append(category).append("'");
        
        return integratedMapper.executeVulnerableQuery(sql.toString());
    }
    
    /**
     * XSS vulnerability test - output without encoding
     */
    public String displayUserInfo_VULNERABLE(String userInput) {
        // This is vulnerable to XSS
        return "<div>User input: " + userInput + "</div>";
    }
    
    /**
     * Path traversal vulnerability test
     */
    public String readFile_VULNERABLE(String filename) {
        try {
            // This is vulnerable to path traversal
            java.nio.file.Path path = java.nio.file.Paths.get("uploads/" + filename);
            return java.nio.file.Files.readString(path);
        } catch (Exception e) {
            return "Error reading file: " + e.getMessage();
        }
    }
    
    /**
     * Weak cryptography - using MD5
     */
    public String hashPassword_WEAK(String password) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] hashBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * Hardcoded credentials vulnerability
     */
    public boolean authenticateAdmin_VULNERABLE(String username, String password) {
        // Hardcoded credentials - security vulnerability
        String adminUser = "admin";
        String adminPass = "password123";
        return adminUser.equals(username) && adminPass.equals(password);
    }
    
    /**
     * Improper error handling - information disclosure
     */
    public String connectToDatabase_VULNERABLE() {
        try {
            Connection conn = java.sql.DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/testdb", "root", "password"
            );
            return "Connected successfully";
        } catch (Exception e) {
            // This exposes sensitive information
            return "Database connection failed: " + e.getMessage() + 
                   " at " + e.getStackTrace()[0].toString();
        }
    }
    
    /**
     * Command injection vulnerability
     */
    public String executeCommand_VULNERABLE(String userCommand) {
        try {
            // This is vulnerable to command injection
            Process process = Runtime.getRuntime().exec("cmd /c " + userCommand);
            java.io.BufferedReader reader = new java.io.BufferedReader(
                new java.io.InputStreamReader(process.getInputStream())
            );
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            return output.toString();
        } catch (Exception e) {
            return "Command execution failed: " + e.getMessage();
        }
    }
    
    /**
     * LDAP injection vulnerability
     */
    public String searchLDAP_VULNERABLE(String username) {
        // This is vulnerable to LDAP injection
        String filter = "(&(objectClass=user)(sAMAccountName=" + username + "))";
        // In real code, this would be used with LDAP search
        return "LDAP filter: " + filter;
    }
    
    /**
     * Insecure deserialization
     */
    public Object deserializeData_VULNERABLE(byte[] data) {
        try {
            java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(data);
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(bis);
            // This is vulnerable to insecure deserialization
            return ois.readObject();
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * Complex method with nested conditions for complexity analysis
     */
    public String processComplexBusiness(String type, int level, boolean isActive, 
                                       String category, Double threshold) {
        StringBuilder result = new StringBuilder();
        
        if (type != null && !type.isEmpty()) {
            if (level > 0) {
                if (isActive) {
                    if ("premium".equals(category)) {
                        if (threshold != null && threshold > 100.0) {
                            result.append("Premium active processing: ");
                            for (int i = 0; i < level; i++) {
                                if (i % 2 == 0) {
                                    result.append("EVEN(").append(i).append(")");
                                } else {
                                    result.append("ODD(").append(i).append(")");
                                }
                                if (i < level - 1) {
                                    result.append(threshold > 200.0 ? " | " : " - ");
                                }
                            }
                        } else {
                            result.append("Premium active low threshold");
                        }
                    } else if ("standard".equals(category)) {
                        result.append("Standard active processing");
                    } else {
                        result.append("Unknown category active processing");
                    }
                } else {
                    result.append("Inactive processing for type: ").append(type);
                }
            } else {
                result.append("Zero level processing");
            }
        } else {
            result.append("Null or empty type");
        }
        
        return result.toString();
    }
}