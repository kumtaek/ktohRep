#!/usr/bin/env python3
"""
Download JavaScript libraries for offline use.
Replaces CDN dependencies with local assets.
"""
import requests
import json
from pathlib import Path
from typing import Dict, List

class AssetDownloader:
    def __init__(self, vendor_dir: str):
        self.vendor_dir = Path(vendor_dir)
        self.vendor_dir.mkdir(parents=True, exist_ok=True)
        
    def download_file(self, url: str, local_path: str) -> bool:
        """Download a file from URL to local path"""
        try:
            print(f"Downloading {url} -> {local_path}")
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            local_file = self.vendor_dir / local_path
            local_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(local_file, 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            print(f"[OK] Downloaded {local_path} ({len(response.text)} chars)")
            return True
            
        except Exception as e:
            print(f"[ERROR] Failed to download {url}: {e}")
            return False
    
    def download_cytoscape_assets(self) -> List[Dict[str, str]]:
        """Download Cytoscape.js and extensions"""
        assets = [
            {
                'url': 'https://unpkg.com/cytoscape@3.23.0/dist/cytoscape.min.js',
                'path': 'cytoscape/cytoscape.min.js',
                'version': '3.23.0'
            },
            {
                'url': 'https://unpkg.com/cytoscape-dagre@2.4.0/cytoscape-dagre.js',
                'path': 'cytoscape-dagre/cytoscape-dagre.js', 
                'version': '2.4.0'
            },
            {
                'url': 'https://unpkg.com/dagre@0.8.5/dist/dagre.min.js',
                'path': 'dagre/dagre.min.js',
                'version': '0.8.5'
            }
        ]
        
        downloaded = []
        for asset in assets:
            if self.download_file(asset['url'], asset['path']):
                downloaded.append(asset)
        
        return downloaded
    
    def generate_manifest(self, assets: List[Dict[str, str]]) -> None:
        """Generate manifest.json with asset information"""
        manifest = {
            'generated': 'Generated by Source Analyzer visualize module',
            'assets': assets,
            'offline_mode': True
        }
        
        manifest_path = self.vendor_dir / 'manifest.json'
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2)
        
        print(f"[OK] Generated manifest: {manifest_path}")

def main():
    """Main function to download all required assets"""
    current_dir = Path(__file__).parent
    downloader = AssetDownloader(str(current_dir))
    
    print("Downloading visualization assets for offline use...")
    
    # Download Cytoscape assets
    cyto_assets = downloader.download_cytoscape_assets()
    
    # Generate manifest
    all_assets = cyto_assets
    downloader.generate_manifest(all_assets)
    
    print(f"\nDownload complete: {len(all_assets)} assets downloaded")
    print("Assets stored in:", downloader.vendor_dir)

if __name__ == '__main__':
    main()