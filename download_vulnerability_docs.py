#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
취약점 문서 및 OWASP 도움말 다운로더
소스 분석 결과에서 발견된 취약점 정보를 기반으로 보안 문서를 자동 생성하는 스크립트
"""
import os
import sqlite3
from pathlib import Path
from datetime import datetime

def create_owasp_help():
    """
    OWASP Top 10 기반의 보안 가이드 템플릿 생성 함수
    - 주요 취약점 유형별 설명과 예방책 제공
    - CWE 매핑 정보 포함
    - 보안 테스트 가이드라인 제공
    """
    owasp_content = """# OWASP 보안 가이드

## 주요 취약점 유형 (OWASP Top 10)

### 1. 인젝션 (Injection)
- **설명**: SQL, NoSQL, OS, LDAP 인젝션 등
- **예방책**: 
  - 준비된 명령문(Prepared Statement) 사용
  - 입력값 검증 및 이스케이프
  - 최소 권한 원칙 적용

### 2. 인증 취약점 (Broken Authentication)
- **설명**: 잘못된 세션 관리, 약한 암호 정책
- **예방책**:
  - 강력한 암호 정책 적용
  - 다중 인증 구현
  - 세션 관리 강화

### 3. 민감한 데이터 노출 (Sensitive Data Exposure)
- **설명**: 암호화되지 않은 데이터 전송/저장
- **예방책**:
  - 전송 중 암호화 (HTTPS/TLS)
  - 저장 시 암호화
  - 민감한 데이터 최소화

### 4. XML 외부 엔티티 (XXE)
- **설명**: XML 파서의 취약점 악용
- **예방책**:
  - XML 외부 엔티티 비활성화
  - 안전한 XML 파서 사용
  - JSON 등 대안 형식 고려

### 5. 접근 제어 취약점 (Broken Access Control)
- **설명**: 권한 부여 메커니즘 결함
- **예방책**:
  - 기본적으로 접근 거부
  - 중앙화된 접근 제어
  - 권한 검증 로직 강화

### 6. 보안 설정 오류 (Security Misconfiguration)
- **설명**: 부적절한 보안 구성
- **예방책**:
  - 정기적인 보안 설정 검토
  - 불필요한 기능 비활성화
  - 자동화된 보안 설정 배포

### 7. 크로스 사이트 스크립팅 (XSS)
- **설명**: 악의적인 스크립트 삽입
- **예방책**:
  - 출력 인코딩
  - Content Security Policy (CSP)
  - 입력값 검증

### 8. 안전하지 않은 역직렬화 (Insecure Deserialization)
- **설명**: 역직렬화 과정에서의 공격
- **예방책**:
  - 신뢰할 수 없는 소스 역직렬화 금지
  - 무결성 검사 구현
  - 대안적 직렬화 형식 사용

### 9. 알려진 취약점이 있는 구성요소 (Using Components with Known Vulnerabilities)
- **설명**: 취약한 라이브러리, 프레임워크 사용
- **예방책**:
  - 정기적인 의존성 스캔
  - 보안 업데이트 적용
  - 취약점 모니터링

### 10. 로깅 및 모니터링 부족 (Insufficient Logging & Monitoring)
- **설명**: 공격 탐지 및 대응 능력 부족
- **예방책**:
  - 포괄적인 로깅
  - 실시간 모니터링
  - 사고 대응 계획

## CWE 매핑

### 주요 CWE 항목
- CWE-89: SQL 인젝션
- CWE-79: 크로스 사이트 스크립팅
- CWE-200: 정보 노출
- CWE-78: OS 명령어 인젝션
- CWE-352: 크로스 사이트 요청 위조
- CWE-22: 경로 순회
- CWE-434: 제한되지 않은 파일 업로드
- CWE-190: 정수 오버플로우
- CWE-798: 하드코딩된 자격증명

## 보안 테스트 가이드

### 정적 분석
- 소스코드 리뷰
- SAST 도구 활용
- 코딩 표준 준수

### 동적 분석
- 침투 테스트
- DAST 도구 활용
- 런타임 취약점 탐지

### 대화형 분석
- IAST 도구 활용
- 실시간 취약점 탐지

생성일: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    return owasp_content

def create_vulnerability_report_template():
    """
    취약점 분석 보고서 템플릿 생성 함수
    - 프로젝트 정보 및 분석 요약 포함
    - 심각도별 취약점 분류
    - 보안 개선 권고사항 제공
    """
    template_content = """# 취약점 분석 보고서

## 프로젝트 정보
- **프로젝트명**: {project_name}
- **분석일**: {analysis_date}
- **분석자**: Source Analyzer Agent
- **보고서 버전**: 1.0

## 요약
- **총 발견 취약점**: {total_vulnerabilities}개
- **심각도 HIGH**: {high_severity}개
- **심각도 MEDIUM**: {medium_severity}개
- **심각도 LOW**: {low_severity}개

## 취약점 상세 분석

{vulnerability_details}

## 보안 개선 권고사항

### 즉시 조치 필요
1. 심각도 HIGH 취약점 즉시 수정
2. 입력값 검증 강화
3. 보안 업데이트 적용

### 단기 개선사항
1. 코드 리뷰 프로세스 강화
2. 보안 테스트 자동화
3. 개발자 보안 교육

### 장기 개선사항
1. 보안 프레임워크 도입
2. 정기적인 보안 감사
3. 모니터링 체계 구축

## 참고 자료
- OWASP Top 10: https://owasp.org/www-project-top-ten/
- CWE 데이터베이스: https://cwe.mitre.org/
- NIST Cybersecurity Framework: https://www.nist.gov/cyberframework

---
*이 보고서는 Source Analyzer Agent에 의해 자동 생성되었습니다.*
"""
    return template_content

def download_docs(project_name):
    """
    취약점 문서 다운로드 및 보고서 생성 메인 함수
    
    Args:
        project_name (str): 분석 대상 프로젝트 이름
        
    Returns:
        dict: 생성된 파일 정보 및 통계
    """
    # 데이터베이스 경로 설정 및 존재 여부 확인
    db_path = f"PROJECT/{project_name}/data/metadata.db"
    if not os.path.exists(db_path):
        print(f"DB 파일 없음: {db_path}")
        return
    
    # 출력 디렉토리 생성
    output_dir = Path(f"output/{project_name}/vulnerability_docs")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # OWASP 보안 가이드 문서 생성
    owasp_help_path = output_dir / "OWASP_도움말.md"
    with open(owasp_help_path, 'w', encoding='utf-8') as f:
        f.write(create_owasp_help())
    print(f"OWASP 도움말 생성 완료: {owasp_help_path}")
    
    # 데이터베이스 연결 및 커서 생성
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # 취약점 데이터 초기화
    vulnerabilities = []
    vulnerability_details = ""
    
    # 데이터베이스에서 취약점 정보 조회
    try:
        # vulnerability_fixes 테이블 존재 여부 확인
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='vulnerability_fixes'")
        if cursor.fetchone():
            # 취약점 데이터 조회 (CWE ID, 설명, 심각도)
            cursor.execute("SELECT DISTINCT cwe_id, description, severity FROM vulnerability_fixes WHERE cwe_id IS NOT NULL")
            vulnerabilities = cursor.fetchall()
            
            # 각 취약점에 대한 개별 문서 생성
            for cwe_code, desc, severity in vulnerabilities:
                # 개별 CWE 취약점 문서 템플릿 생성
                content = f"""# CWE-{cwe_code} 취약점 분석

## 설명
{desc or '상세 설명 없음'}

## 심각도
{severity or 'MEDIUM'}

## 권장 수정사항
- 입력값 검증 강화
- 적절한 인코딩 적용
- 보안 라이브러리 사용
- 최소 권한 원칙 적용

## OWASP 매핑
이 취약점은 OWASP Top 10의 다음 항목과 관련됩니다:
- 해당 항목을 확인하여 적절한 대응책을 수립하세요

## 참고 자료
- CWE-{cwe_code}: https://cwe.mitre.org/data/definitions/{cwe_code}.html
- OWASP 가이드: 'OWASP_도움말.md' 참조

생성일: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
                
                # 개별 CWE 문서 파일로 저장
                with open(output_dir / f"CWE-{cwe_code}.md", 'w', encoding='utf-8') as f:
                    f.write(content)
                
                # 종합 보고서에 포함될 취약점 상세 정보 구성
                vulnerability_details += f"""
### CWE-{cwe_code}
- **설명**: {desc or '상세 설명 없음'}
- **심각도**: {severity or 'MEDIUM'}
- **파일**: CWE-{cwe_code}.md 참조

"""
            
            print(f"취약점 문서 {len(vulnerabilities)}개 생성 완료")
        else:
            # vulnerability_fixes 테이블이 존재하지 않는 경우
            print("vulnerability_fixes 테이블이 없습니다")
            vulnerability_details = "취약점 정보를 찾을 수 없습니다."
    except Exception as e:
        # 데이터베이스 조회 중 오류 발생 시 처리
        print(f"취약점 문서 생성 실패: {e}")
        vulnerability_details = f"취약점 분석 중 오류 발생: {e}"
    
    # 심각도별 취약점 통계 계산
    high_severity = len([v for v in vulnerabilities if len(v) > 2 and v[2] == 'HIGH'])
    medium_severity = len([v for v in vulnerabilities if len(v) > 2 and v[2] == 'MEDIUM'])
    low_severity = len([v for v in vulnerabilities if len(v) > 2 and v[2] == 'LOW'])
    
    # 취약점 분석 보고서 템플릿에 실제 데이터 적용
    report_content = create_vulnerability_report_template().format(
        project_name=project_name,
        analysis_date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        total_vulnerabilities=len(vulnerabilities),
        high_severity=high_severity,
        medium_severity=medium_severity,
        low_severity=low_severity,
        vulnerability_details=vulnerability_details or "발견된 취약점이 없습니다."
    )
    
    # 취약점 분석 보고서 파일 생성 및 저장
    report_path = output_dir / "취약점보고서.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report_content)
    print(f"취약점보고서 생성 완료: {report_path}")
    
    # 데이터베이스 연결 종료
    conn.close()
    
    # 생성 결과 정보 반환
    return {
        'vulnerability_count': len(vulnerabilities),
        'owasp_help_path': str(owasp_help_path),
        'report_path': str(report_path),
        'output_dir': str(output_dir)
    }

# 메인 실행 부분
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='취약점 문서 및 OWASP 도움말 다운로더')
    parser.add_argument('--project-name', required=True, help='분석 대상 프로젝트 이름')
    args = parser.parse_args()
    download_docs(args.project_name)
