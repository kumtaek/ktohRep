@echo off
chcp 65001 > nul
SETLOCAL

REM --- 시작 ---
SET PROJECT_NAME=%1
SET PYTHON_EXE=python
SET SCRIPT_DIR=E:\SourceAnalyzer.git
SET OUTPUT_DIR=%SCRIPT_DIR%\output\%PROJECT_NAME%
SET BATCH_SIZE=10

REM --- 프로젝트 이름 유효성 검사 ---
IF "%PROJECT_NAME%"=="" (
    ECHO 오류: PROJECT_NAME을(를) 실행할 프로젝트 이름으로 지정해야 합니다.
    GOTO :EOF
)

REM --- 출력 디렉터리 생성 ---
IF NOT EXIST "%OUTPUT_DIR%" (
    MKDIR "%OUTPUT_DIR%"
    IF %ERRORLEVEL% NEQ 0 (
        ECHO 오류: 출력 디렉터리 생성 실패 - %OUTPUT_DIR%
        GOTO :EOF
    )
)

ECHO ==================================================
ECHO SourceAnalyzer 전체 분석 시작: %PROJECT_NAME%
ECHO ==================================================

REM --- 1. LLM 기반 분석 및 강화 ---
ECHO.
ECHO --- 1.1. 코드 요약 및 분석 ---
%PYTHON_EXE% "%SCRIPT_DIR%\phase1\tools\llm_analyzer.py" summarize --project-name %PROJECT_NAME% --batch-size %BATCH_SIZE%
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: 코드 요약 및 분석 실패.
    GOTO :EOF
)
ECHO 코드 요약 및 분석 완료.

ECHO.
ECHO --- 1.2. 데이터베이스 주석 강화 ---
%PYTHON_EXE% "%SCRIPT_DIR%\phase1\tools\llm_analyzer.py" enhance-db --project-name %PROJECT_NAME% --batch-size %BATCH_SIZE%
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: 데이터베이스 주석 강화 실패.
    GOTO :EOF
)
ECHO 데이터베이스 주석 강화 완료.

ECHO.
ECHO --- 1.3. SQL 조인 관계 분석 ---
%PYTHON_EXE% "%SCRIPT_DIR%\phase1\tools\llm_analyzer.py" analyze-joins --project-name %PROJECT_NAME% --batch-size %BATCH_SIZE%
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: SQL 조인 관계 분석 실패.
    GOTO :EOF
)
ECHO SQL 조인 관계 분석 완료.

REM --- 2. 보고서 생성 ---
ECHO.
ECHO --- 2.1. 테이블 명세서 생성 ---
%PYTHON_EXE% "%SCRIPT_DIR%\phase1\tools\llm_analyzer.py" table-spec --project-name %PROJECT_NAME% --output "%OUTPUT_DIR%\테이블명세서.md"
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: 테이블 명세서 생성 실패.
    GOTO :EOF
)
ECHO 테이블 명세서 생성 완료: "%OUTPUT_DIR%\테이블명세서.md"

ECHO.
ECHO --- 2.2. 소스 코드 명세서 생성 ---
%PYTHON_EXE% "%SCRIPT_DIR%\phase1\tools\llm_analyzer.py" source-spec --project-name %PROJECT_NAME% --output "%OUTPUT_DIR%\소스명세서.md"
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: 소스 코드 명세서 생성 실패.
    GOTO :EOF
)
ECHO 소스 코드 명세서 생성 완료: "%OUTPUT_DIR%\소스명세서.md"

REM --- 3. 시각화 생성 ---
ECHO.
ECHO --- 3.1. 코드 시퀀스 다이어그램 생성 (강화된 버전) ---
REM visualize/cli.py의 generate-sequence-diagrams 명령을 사용합니다.
%PYTHON_EXE% "%SCRIPT_DIR%\visualize\cli.py" generate-sequence-diagrams --project-name %PROJECT_NAME% --max-diagrams 5 --depth 3 --max-nodes 50 --output-dir "%OUTPUT_DIR%"
IF %ERRORLEVEL% NEQ 0 (
    ECHO 오류: 코드 시퀀스 다이어그램 생성 실패. visualize/cli.py의 로그를 확인하십시오.
)
ECHO 코드 시퀀스 다이어그램 생성 완료.

ECHO.
ECHO ==================================================
ECHO SourceAnalyzer 전체 분석 완료.
ECHO 결과는 다음 디렉터리에서 확인할 수 있습니다: %OUTPUT_DIR%
ECHO ==================================================

ENDLOCAL
